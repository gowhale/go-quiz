// Code generated by mockery v1.0.0. DO NOT EDIT.

package quiz

import (
	io "io"
	os "os"

	mock "github.com/stretchr/testify/mock"
)

// mockLoader is an autogenerated mock type for the loader type
type mockLoader struct {
	mock.Mock
}

// Close provides a mock function with given fields: jsonFile
func (_m *mockLoader) Close(jsonFile *os.File) error {
	ret := _m.Called(jsonFile)

	var r0 error
	if rf, ok := ret.Get(0).(func(*os.File) error); ok {
		r0 = rf(jsonFile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Open provides a mock function with given fields: name
func (_m *mockLoader) Open(name string) (*os.File, error) {
	ret := _m.Called(name)

	var r0 *os.File
	if rf, ok := ret.Get(0).(func(string) *os.File); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadAll provides a mock function with given fields: r
func (_m *mockLoader) ReadAll(r io.Reader) ([]byte, error) {
	ret := _m.Called(r)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(io.Reader) []byte); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unmarshal provides a mock function with given fields: data
func (_m *mockLoader) Unmarshal(data []byte) ([]question, error) {
	ret := _m.Called(data)

	var r0 []question
	if rf, ok := ret.Get(0).(func([]byte) []question); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]question)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
